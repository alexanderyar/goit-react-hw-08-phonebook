{"version":3,"file":"static/js/76.55603f28.chunk.js","mappings":"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","sources":["components/Phonebook/Contacts/Contacts.styled.jsx","components/Phonebook/Form/Form.styled.jsx","components/Phonebook/Phonebook.styled.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/Phonebook/Form/Form.jsx","components/Phonebook/Contacts/Filter/FIlter.styled.jsx","components/Phonebook/Contacts/Filter/Filter.jsx","../node_modules/grommet-styles/es6/utils/colors.js","../node_modules/grommet-styles/es6/styles/color.js","../node_modules/grommet-icons/es6/default-props.js","../node_modules/grommet-icons/es6/themes/base.js","../node_modules/grommet-icons/es6/StyledIcon.js","../node_modules/grommet-icons/es6/icons/Trash.js","components/Phonebook/Contacts/ContactsList.jsx","components/Phonebook/Contacts/Contacts.jsx","components/Phonebook/Phonebook.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ListWrapper = styled.ul`\nlist-style: none;\n\npadding-left:0;\n\n`\nexport const ListItem = styled.li`\ndisplay:flex;\njustify-content:space-between;\n`\n\nexport const Header = styled.h2`\n\ntext-align: center;\n\nborder-top: 1px solid black;\n`\n\n","import styled from 'styled-components'\nimport { Form, Field } from 'formik';\nimport { Button } from '@mui/material';\n\n\nexport const ButtonStyled = styled(Button)`\n\n`\n    \n\nexport const FormStyled = styled(Form)`\n\ndisplay:flex;\nflex-direction: column;\nborder: 1px solid black;\npadding: 10px;\n// background: rgb(9,10,121);\n// color:white;\n  align-items: center;\n`\n\nexport const Input = styled(Field)`\nmargin-right:15px;\n\nfont-size:18;\nfont-weight:700;\ncolor:black;\nmargin-bottom:10px;\n`\n\n\n\n// padding-left: 15px; \n// padding-right: 15px;\n// background-color: violet;","import styled from 'styled-components'\n\n\nexport const PhonebookWrapper = styled.div`\nmargin-left:auto;\nmargin-right:auto;\n`\nexport const HeaderMain = styled.h1`\ntext-align:center;\npadding: 5 30;\n`","import { Field } from 'formik'\nimport styled from 'styled-components'\nimport Button from '@mui/material/Button';\n\n\nexport const InputContainer = styled.div`\ndisplay:flex;\nflex-direction:column;\nalign-items: center;\njustify-content: center;\n`\n\nexport const RegisterInput = styled(Field)`\ndisplay:flex;\nflex-direction:column;\n`\n\nexport const RegisterSubmit = styled(Button)`\nwidth: 100px;\n\n`","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ButtonStyled, FormStyled } from './Form.styled';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { addContactThunkOperation } from 'redux/contacts/contactsOperations';\nimport { Header } from '../Contacts/Contacts.styled';\nimport { RegisterInput } from 'components/RegisterForm/RegisterForm.styled';\n\n\n\n\n\n\n// values for Formik \nconst initialValues = {\n    name: '',\n    number: ''\n}\n   \nexport const FormikForm = ({ handleSubmit }) => {\n\n    // const contacts = useSelector(state => state.contacts.contacts)\n    const dispatch = useDispatch();\n    \n     \n// const updatePhoneBookList = (newContactName) => {\n//         console.log(newContactName)\n        \n//         // checking if this contact new or exists in the phonebook\n//         const foundDuplicate = contacts.find(contact => contact.name === newContactName.name)\n//         if (foundDuplicate) {\n//             alert(`Open your eyes, ${newContactName.name} is already in your phonebook!`)\n//         return}\n//         // adding new contact name\n//         const contactNew = { ...newContactName, id: nanoid() }\n//         console.log(contactNew)\n\n//         dispatch(addingNewContact(contactNew))\n// }\n    \n    \nhandleSubmit = (values, {resetForm}) => {\n        \n    console.log(values)\n\n        // refactored. Now addContactThunkOperation from API gets values and sends it deeper to addContact from API service, not updatePhoneBookList\n        dispatch(addContactThunkOperation(values))\n        //  updatePhoneBookList(values)   \n        resetForm();\n        \n}\n    \n     \n  \n\n    return (\n        <>\n           <Header>Let's add a new contact</Header>\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n             <FormStyled autoComplete='off'>\n            <label htmlFor=\"name\">\n               Please enter a name\n            <RegisterInput\n  type=\"text\"\n  name=\"name\"\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required />\n                </label>\n\n                <label htmlFor=\"number\">\n                   phone number\n                    <RegisterInput\n  type=\"tel\"\n  name=\"number\"\n  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n  required\n/>\n               </label>\n            \n                <ButtonStyled type=\"submit\" variant=\"outlined\">Submit</ButtonStyled>\n      \n \n\n        \n        </FormStyled>\n            </Formik>\n        </>\n    )\n}\n\n\nFormikForm.propTypes = {\n    initialValues: PropTypes.objectOf(PropTypes.string),\n}","import styled from 'styled-components'\n\nexport const FilterInput = styled.label`\ndisplay: block;\n    text-align: center;\n    `","import PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { addingFilterValue } from 'redux/filterSlice/filterSlice'\nimport { FilterInput } from './FIlter.styled'\n    \nexport const  Filter = () => {\n\n    //reading filterValue from redux store state \"filter\"\n    const filterValue = useSelector(state => state.filter)\n    \n    // assigning dispatch func\n    const dispatch = useDispatch()\n\n\n\n        return (\n        <FilterInput htmlFor=\"filter\">Find your contact  \n                <input name=\"filter\" type=\"text\" value={filterValue} onChange={(e) =>\n                    dispatch(addingFilterValue(e.currentTarget.value))} />\n        </FilterInput>\n       \n    )\n    }\n    \n\n\nFilter.propTypes = {\n    inputValue: PropTypes.string,\n    filterFunc: PropTypes.func\n}","// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b) {\n    return \"#\" + r + r + g + g + b + b;\n  }).substring(1).match(/.{2}/g).map(function (x) {\n    return parseInt(x, 16);\n  });\n};\n\nvar getRGBArray = function getRGBArray(color) {\n  if (/^#/.test(color)) {\n    return parseHexToRGB(color);\n  }\n\n  if (/^rgb/.test(color)) {\n    return color.match(/rgba?\\((\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?),(\\s?[0-9]*\\s?).*?\\)/).splice(1);\n  }\n\n  return color;\n};\n\nexport var colorIsDark = function colorIsDark(color) {\n  var _getRGBArray = getRGBArray(color),\n      red = _getRGBArray[0],\n      green = _getRGBArray[1],\n      blue = _getRGBArray[2]; // http://www.had2know.com/technology/\n  //  color-contrast-calculator-web-design.html\n\n\n  var brightness = (299 * red + 587 * green + 114 * blue) / 1000;\n  return brightness < 125;\n};\nexport var normalizeColor = function normalizeColor(color, theme) {\n  var colorSpec = theme.global.colors[color] || color; // If the color has a light or dark object, use that\n\n  var result = colorSpec;\n\n  if (theme.dark && colorSpec.dark) {\n    result = colorSpec.dark;\n  } else if (!theme.dark && colorSpec.light) {\n    result = colorSpec.light;\n  } // allow one level of indirection in color names\n\n\n  if (result && theme.global.colors[result] && theme.global.colors[result] !== result) {\n    result = normalizeColor(result, theme);\n  }\n\n  return result;\n};","import { css } from 'styled-components';\nimport { normalizeColor } from '../utils';\nexport var colorStyle = function colorStyle(name, value, theme, required) {\n  return css([\"\", \":\", \";\"], name, normalizeColor(value, theme, required));\n};","import { deepMerge } from './utils';\nimport { base } from './themes';\nexport var defaultProps = {\n  theme: base\n};\nexport var extendDefaultTheme = function extendDefaultTheme(theme) {\n  defaultProps.theme = deepMerge(base, theme);\n};","export var base = {\n  global: {\n    colors: {\n      icon: '#666666'\n    }\n  },\n  icon: {\n    size: {\n      small: '12px',\n      medium: '24px',\n      large: '48px',\n      xlarge: '96px'\n    }\n  }\n};","var _excluded = [\"a11yTitle\", \"color\", \"size\", \"theme\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { colorStyle } from 'grommet-styles';\nimport { defaultProps } from './default-props';\nvar colorCss = css([\"\", \" \", \" g{fill:inherit;stroke:inherit;}*:not([stroke]){&[fill=\\\"none\\\"]{stroke-width:0;}}*[stroke*=\\\"#\\\"],*[STROKE*=\\\"#\\\"]{stroke:inherit;fill:none;}*[fill-rule],*[FILL-RULE],*[fill*=\\\"#\\\"],*[FILL*=\\\"#\\\"]{fill:inherit;stroke:none;}\"], function (props) {\n  return colorStyle('fill', props.color || props.theme.global.colors.icon, props.theme);\n}, function (props) {\n  return colorStyle('stroke', props.color || props.theme.global.colors.icon, props.theme);\n});\nvar IconInner = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      color = _ref.color,\n      size = _ref.size,\n      theme = _ref.theme,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    \"aria-label\": a11yTitle\n  }, rest));\n});\nIconInner.displayName = 'Icon';\n\nvar parseMetricToNum = function parseMetricToNum(string) {\n  return parseFloat(string.match(/\\d+(\\.\\d+)?/), 10);\n};\n\nvar StyledIcon = styled(IconInner).withConfig({\n  displayName: \"StyledIcon\",\n  componentId: \"sc-ofa7kd-0\"\n})([\"display:inline-block;flex:0 0 auto;\", \" \", \" \", \"\"], function (_ref2) {\n  var _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 'medium' : _ref2$size,\n      theme = _ref2.theme,\n      viewBox = _ref2.viewBox;\n\n  var _split = (viewBox || '0 0 24 24').split(' '),\n      w = _split[2],\n      h = _split[3];\n\n  var scale = w / h;\n  var dimension = parseMetricToNum(theme.icon.size[size] || size);\n\n  if (w < h) {\n    return \"\\n      width: \" + dimension + \"px;\\n      height: \" + dimension / scale + \"px;\\n    \";\n  }\n\n  if (h < w) {\n    return \"\\n      width: \" + dimension * scale + \"px;\\n      height: \" + dimension + \"px;\\n    \";\n  }\n\n  return \"\\n      width: \" + dimension + \"px;\\n      height: \" + dimension + \"px;\\n    \";\n}, function (_ref3) {\n  var color = _ref3.color;\n  return color !== 'plain' && colorCss;\n}, function (_ref4) {\n  var theme = _ref4.theme;\n  return theme && theme.icon.extend;\n});\nStyledIcon.defaultProps = {};\nObject.setPrototypeOf(StyledIcon.defaultProps, defaultProps);\nexport { StyledIcon };","function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { forwardRef } from 'react';\nimport { StyledIcon } from '../StyledIcon';\nvar Trash = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(StyledIcon, _extends({\n    ref: ref,\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Trash\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M4 5h16v18H4V5zM1 5h22M9 1h6v4H9V1zm0 0h6v4H9V1zm6 8v10M9 9v10\"\n  }));\n});\nTrash.displayName = 'Trash';\nexport { Trash };","import { ListItem } from \"./Contacts.styled\"\nimport { Trash } from 'grommet-icons';\n\n\n\nexport const ContactsList = ({filteredContacts, onDeleteClick}) => {\n\n    return (\n        <>\n        {filteredContacts.map(({ name, id, number }) => (\n                    <ListItem key={id}><p>{name}: {number}</p><button type=\"button\" onClick={() => onDeleteClick(id)}>  <Trash size=\"15px\"/></button></ListItem>\n                    \n                ))}</>\n    )\n}","import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport { Filter } from './Filter/Filter'\nimport { Header, ListWrapper } from './Contacts.styled'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteContactThunkOperation } from 'redux/contacts/contactsOperations'\nimport { ContactsList } from './ContactsList'\n\n\n\n\nexport const Contacts =  () => {\n\n    const dispatch = useDispatch();\n\n    // moved to ContactsPage for test;\n    // fetching contacts from backend;\n    // useEffect(() => {\n    //   dispatch(fetchContactsThunkOperation())\n    // }, [dispatch])\n    \n     const contacts = useSelector(state => state.contacts.contacts);\n\n   \n    const filterLowered = useSelector(state => state.filter).toLowerCase()\n    \n    const CheckIfNeedToRenderContacts = (filterValue, contactsValue) => {\n       console.log( contactsValue)\n        if (contactsValue.length === 0) {\n            return false;  \n        }\n     const filteredContacts = contacts.filter(contact =>\n         contact.name.toLowerCase().includes(filterValue))\n        return filteredContacts\n\n    }\n   \n    const filteredContacts = CheckIfNeedToRenderContacts(filterLowered, contacts)\n    console.log(filteredContacts)\n\n\n// const filteredContacts = contacts.filter(contact =>\n//        contact.name.toLowerCase().includes(filterLowered) )\n\n    \n    // refactored. now onDelete click has been transferred FROM Phonebook component. dispatch is used instead of useState to delete (using filter) chosen contact\n const onDeleteClick = (id) => {\n        console.log(id)\n     dispatch(deleteContactThunkOperation(id));\n }\n//   {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    \n \n    return (\n\n        <>\n            <Header>Existing Contacts</Header>\n            <Filter />\n            <ListWrapper>\n               \n                {filteredContacts ?  <ContactsList filteredContacts={filteredContacts} onDeleteClick={onDeleteClick} />\n     : <p>Add your first contact now!</p> }\n             \n              \n            </ListWrapper>\n        </>)\n}\n        \n\nContacts.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.exact({\n            id: PropTypes.string,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n            \n        })),\n    filterFunc: PropTypes.func,\n    inputValue: PropTypes.string,\n    onDeleteClick: PropTypes.func,\n}\n","\nimport PropTypes from 'prop-types'\nimport { FormikForm } from './Form/Form'\nimport { Contacts } from './Contacts/Contacts'\nimport { HeaderMain, PhonebookWrapper } from './Phonebook.styled'\n// import { useSelector } from 'react-redux'\n\n\nexport const Phonebook = () => {\n\n    // const randomArrayOfNames = [{id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\"},\n    //         {id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\"},\n    //         {id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\"},\n    //         { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" }]\n\n  \n  // !!!\n    // fetching default array of contacts from initialState of contactSlice\n    // const randomArrayOfNames = useSelector(state => state.contacts);\n\n  // const contacts = useSelector(state => state.contacts.contacts);\n\n  // console.log(contacts)\n\n \n  \n \n\n    \n    \n    // !!! re-do later\n    // const [contacts, setContacts] = useState(() => {return JSON.parse(localStorage.getItem('contacts')) ?? randomArrayOfNames})\n    \n\n    // used redux instead\n    // const [filter, setFilter] = useState('')\n\n    \n\n    //adding componentDidmount, so contacts are copied from the localStorage after reloading automatically\n\n    //this useEffect can be omitted if default value of contacts can is derived from the localstorage as default when creating useState\n    // useEffect(() => {\n    //     const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\n    //     console.log('вызвался юзэффект при mount')\n    //     if (parsedContacts)\n    //    { setContacts(parsedContacts)}\n    // }, [])\n    \n    \n    // !!! replaced with Redux-persist in contactSlice Component;\n      // adding to localstorage when \"componentDidUpdate\"\n    // useEffect(() => {\n    //     console.log('вызвался юзэффект при апдейте contacts')\n    //     localStorage.setItem('contacts', JSON.stringify(contacts))\n    // }, [contacts])\n    \n\n\n  \n\n    // const updatePhoneBookList = (newContactName) => {\n    //     console.log(newContactName)\n        \n    //     // checking if this contact new or exists in the phonebook\n    //     const foundDuplicate = contacts.find(contact => contact.name === newContactName.name)\n    //     if (foundDuplicate) {\n    //         alert(`Open your eyes, ${newContactName.name} is already in your phonebook!`)\n    //     return}\n    //     // adding new contact name\n    //     const contactNew = { ...newContactName, id: nanoid() }\n    //     console.log(contactNew)\n\n    //     dispatch(addingNewContact(contactNew))\n    // }\n\n\n  // used reducer in redux\n    // const handleChange = (e) => {\n    //     console.log(e.currentTarget.value)\n        \n    //     setFilter(e.currentTarget.value)\n    // }\n\n\n\n    // tranferred to the \"Contacts\" components + redux\n    // const onDeleteClick = (id) => {\n        \n    //     setContacts(prevState => (prevState.filter(contact => contact.id !== id) ))\n\n    // }\n\n\n    \n    // now lowered filter get it's value from redux\n  // const filterLowered = useSelector(state => state.filter).toLowerCase()\n  // console.log(filterLowered)\n\n  // turning object with contacts that persist returns into array (in order to to use with map)\n\n  \n \n  \n  \n\n\n\n    \n//    return (\n//     <PhonebookWrapper>\n//     <FormikForm onSubmit={updatePhoneBookList} />\n//     <Contacts contacts={filteredContacts}   onDeleteClick={onDeleteClick} />\n//     </PhonebookWrapper>\n//     )\n    \n    \n  return (\n       \n    <PhonebookWrapper>\n      <HeaderMain>The best phonebook in the world</HeaderMain>\n    <FormikForm  />\n    <Contacts     />\n    </PhonebookWrapper>\n    )\n    \n}\n    \n\n\nPhonebook.propTypes = {\n    newContactName: PropTypes.objectOf(PropTypes.string),\n    id: PropTypes.string,\n}\n","import { Phonebook } from \"components/Phonebook/Phonebook\"\nimport { useEffect } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { fetchContactsThunkOperation } from \"redux/contacts/contactsOperations\";\n\n\n\n// export default function ContactsPage() {\n  export default function ContactsPage() {\n    const dispatch = useDispatch();\n\n\n    // important! we fetch Contact in a ContactsPage! not in Contacts component\n    useEffect(() => {\n\n     dispatch(fetchContactsThunkOperation())\n    }, [dispatch])\n\n    return (\n        <Phonebook />\n    )\n}"],"names":["ListWrapper","styled","ListItem","Header","ButtonStyled","Button","FormStyled","Form","Field","PhonebookWrapper","HeaderMain","InputContainer","RegisterInput","RegisterSubmit","initialValues","name","number","FormikForm","handleSubmit","dispatch","useDispatch","values","resetForm","console","log","addContactThunkOperation","onSubmit","autoComplete","htmlFor","type","pattern","title","required","variant","FilterInput","Filter","filterValue","useSelector","state","filter","value","onChange","e","addingFilterValue","currentTarget","normalizeColor","color","theme","colorSpec","global","colors","result","dark","light","colorStyle","css","defaultProps","icon","size","small","medium","large","xlarge","_excluded","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","colorCss","props","IconInner","forwardRef","_ref","ref","a11yTitle","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","React","displayName","StyledIcon","withConfig","componentId","_ref2","string","_ref2$size","_split","viewBox","split","w","h","scale","dimension","parseFloat","match","_ref3","_ref4","extend","setPrototypeOf","Trash","fill","stroke","strokeWidth","d","ContactsList","filteredContacts","onDeleteClick","map","id","onClick","Contacts","contactsValue","contacts","filterLowered","toLowerCase","contact","includes","deleteContactThunkOperation","Phonebook","ContactsPage","useEffect","fetchContactsThunkOperation"],"sourceRoot":""}